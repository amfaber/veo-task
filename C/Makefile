# # Makefile
# # Almost entirely generated by GPT-4

# CC=gcc
# CFLAGS=-Iyahdlc/C -g
# DEPS = yahdlc/C/yahdlc.h
# OBJ = build/main.o yahdlc/C/yahdlc.o yahdlc/C/fcs.o
# TARGET = build/main

# # Check for Windows and define clean command
# ifdef SystemRoot
# 	RM = del /Q
# 	MKDIR = if not exist $(@D) mkdir $(@D)
# 	RMDIR = rd /s /q
# else
# 	RM = rm -f
# 	MKDIR = mkdir -p $(@D)
# 	RMDIR = rm -rf
# endif

# build/main.o: main.c $(DEPS)
# 	$(MKDIR)
# 	$(CC) -c -o $@ $< $(CFLAGS)

# yahdlc/C/%.o: yahdlc/C/%.c $(DEPS)
# 	$(CC) -c -o $@ $< $(CFLAGS)

# $(TARGET): $(OBJ)
# 	$(CC) -o $@ $^ $(CFLAGS)

# .PHONY: clean

# clean:
# 	$(RM) yahdlc\C\*.o
# 	$(RMDIR) build

# run: $(TARGET)
# 	./$<.exe


# Makefile

CC=gcc
CFLAGS=-Iyahdlc/C -g
DEPS = yahdlc/C/yahdlc.h
OBJ = build/main.o build/yahdlc.o build/fcs.o
TARGET = build/main

# Check for Windows and define clean command
ifdef SystemRoot
	RM = del /Q
	MKDIR = if not exist $(@D) mkdir $(@D)
	RMDIR = rd /s /q
else
	RM = rm -f
	MKDIR = mkdir -p $(@D)
	RMDIR = rm -rf
endif

build/main.o: main.c $(DEPS)
	$(MKDIR)
	$(CC) -c -o $@ $< $(CFLAGS)

build/%.o: yahdlc/C/%.c $(DEPS)
	$(MKDIR)
	$(CC) -c -o $@ $< $(CFLAGS)

$(TARGET): $(OBJ)
	$(CC) -o $@ $^ $(CFLAGS)

.PHONY: clean

clean:
	$(RM) build\*.o
	$(RMDIR) build

run: $(TARGET)
	./$<.exe

